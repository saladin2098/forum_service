// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: posts_tags.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PostTagService_GetPostTags_FullMethodName       = "/forum_protos.PostTagService/GetPostTags"
	PostTagService_CreatePostTag_FullMethodName     = "/forum_protos.PostTagService/CreatePostTag"
	PostTagService_GetPostTag_FullMethodName        = "/forum_protos.PostTagService/GetPostTag"
	PostTagService_DeletePostTagById_FullMethodName = "/forum_protos.PostTagService/DeletePostTagById"
	PostTagService_UpdatePostTag_FullMethodName     = "/forum_protos.PostTagService/UpdatePostTag"
)

// PostTagServiceClient is the client API for PostTagService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostTagServiceClient interface {
	GetPostTags(ctx context.Context, in *ByPost, opts ...grpc.CallOption) (*PostTags, error)
	CreatePostTag(ctx context.Context, in *PostTag, opts ...grpc.CallOption) (*PostTag, error)
	GetPostTag(ctx context.Context, in *ById, opts ...grpc.CallOption) (*PostTag, error)
	DeletePostTagById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
	UpdatePostTag(ctx context.Context, in *PostTag, opts ...grpc.CallOption) (*PostTag, error)
}

type postTagServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPostTagServiceClient(cc grpc.ClientConnInterface) PostTagServiceClient {
	return &postTagServiceClient{cc}
}

func (c *postTagServiceClient) GetPostTags(ctx context.Context, in *ByPost, opts ...grpc.CallOption) (*PostTags, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostTags)
	err := c.cc.Invoke(ctx, PostTagService_GetPostTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postTagServiceClient) CreatePostTag(ctx context.Context, in *PostTag, opts ...grpc.CallOption) (*PostTag, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostTag)
	err := c.cc.Invoke(ctx, PostTagService_CreatePostTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postTagServiceClient) GetPostTag(ctx context.Context, in *ById, opts ...grpc.CallOption) (*PostTag, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostTag)
	err := c.cc.Invoke(ctx, PostTagService_GetPostTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postTagServiceClient) DeletePostTagById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, PostTagService_DeletePostTagById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postTagServiceClient) UpdatePostTag(ctx context.Context, in *PostTag, opts ...grpc.CallOption) (*PostTag, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostTag)
	err := c.cc.Invoke(ctx, PostTagService_UpdatePostTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostTagServiceServer is the server API for PostTagService service.
// All implementations must embed UnimplementedPostTagServiceServer
// for forward compatibility
type PostTagServiceServer interface {
	GetPostTags(context.Context, *ByPost) (*PostTags, error)
	CreatePostTag(context.Context, *PostTag) (*PostTag, error)
	GetPostTag(context.Context, *ById) (*PostTag, error)
	DeletePostTagById(context.Context, *ById) (*Void, error)
	UpdatePostTag(context.Context, *PostTag) (*PostTag, error)
	mustEmbedUnimplementedPostTagServiceServer()
}

// UnimplementedPostTagServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPostTagServiceServer struct {
}

func (UnimplementedPostTagServiceServer) GetPostTags(context.Context, *ByPost) (*PostTags, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostTags not implemented")
}
func (UnimplementedPostTagServiceServer) CreatePostTag(context.Context, *PostTag) (*PostTag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePostTag not implemented")
}
func (UnimplementedPostTagServiceServer) GetPostTag(context.Context, *ById) (*PostTag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostTag not implemented")
}
func (UnimplementedPostTagServiceServer) DeletePostTagById(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePostTagById not implemented")
}
func (UnimplementedPostTagServiceServer) UpdatePostTag(context.Context, *PostTag) (*PostTag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePostTag not implemented")
}
func (UnimplementedPostTagServiceServer) mustEmbedUnimplementedPostTagServiceServer() {}

// UnsafePostTagServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostTagServiceServer will
// result in compilation errors.
type UnsafePostTagServiceServer interface {
	mustEmbedUnimplementedPostTagServiceServer()
}

func RegisterPostTagServiceServer(s grpc.ServiceRegistrar, srv PostTagServiceServer) {
	s.RegisterService(&PostTagService_ServiceDesc, srv)
}

func _PostTagService_GetPostTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostTagServiceServer).GetPostTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostTagService_GetPostTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostTagServiceServer).GetPostTags(ctx, req.(*ByPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostTagService_CreatePostTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostTag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostTagServiceServer).CreatePostTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostTagService_CreatePostTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostTagServiceServer).CreatePostTag(ctx, req.(*PostTag))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostTagService_GetPostTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostTagServiceServer).GetPostTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostTagService_GetPostTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostTagServiceServer).GetPostTag(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostTagService_DeletePostTagById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostTagServiceServer).DeletePostTagById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostTagService_DeletePostTagById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostTagServiceServer).DeletePostTagById(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostTagService_UpdatePostTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostTag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostTagServiceServer).UpdatePostTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostTagService_UpdatePostTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostTagServiceServer).UpdatePostTag(ctx, req.(*PostTag))
	}
	return interceptor(ctx, in, info, handler)
}

// PostTagService_ServiceDesc is the grpc.ServiceDesc for PostTagService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostTagService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "forum_protos.PostTagService",
	HandlerType: (*PostTagServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPostTags",
			Handler:    _PostTagService_GetPostTags_Handler,
		},
		{
			MethodName: "CreatePostTag",
			Handler:    _PostTagService_CreatePostTag_Handler,
		},
		{
			MethodName: "GetPostTag",
			Handler:    _PostTagService_GetPostTag_Handler,
		},
		{
			MethodName: "DeletePostTagById",
			Handler:    _PostTagService_DeletePostTagById_Handler,
		},
		{
			MethodName: "UpdatePostTag",
			Handler:    _PostTagService_UpdatePostTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "posts_tags.proto",
}
